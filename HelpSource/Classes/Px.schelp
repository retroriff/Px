class:: Px
summary:: A patterns builder class for SuperCollider
categories:: Streams-Patterns-Events>Patterns>Parallel
related:: Classes/Event, Classes/Pbind, Classes/PbindFx, Classes/Ptpar

description::
The `Px` class is a patterns builder that shorten and simplify
the patterns syntax and incorporates some additional features
for live coding.

Px is a concatenation of Ndef proxies, where each Ndef represents a Pbindef
that defines a sequence of musical events. We can control multiple sound sources
by mixing them, adjusting individual parameters, and applying effects globally or independently.

code::
a = Ndef(\bd, Pbindef(\bd, \instrument, \loop, \buf, ~buf.("mt-8", 0), \dur, 8, \amp, 0.4));
b = Ndef(\sn, Pbindef(\sn, \instrument, \sn, \dur, 2, \timingOffset, 1, \amp, 1.3));
c = Dictionary.newFrom([\bd, a, \sn, b]);
Ndef(\px, { Mix(c) }).quant_(4).play;

// Reevaluations can be executed with Pbindef:
Pbindef(\bd, \instrument, \loop, \buf, ~buf.("mt-8", 0), \dur, 16, \amp, 0.4);

// And additions or removals are reevaluated from \px:
c.removeAt(\sn);
Ndef(\px, { Mix(c) });

// Pbindef Ndef can be controlled independently:
Ndef(\sn).release(10);

// Fx can apply FX to \px and to each item:
Fx(\px).reverb(Nil)
Fx(\sn).reverb(0.5)

// We can use Pdef utilities:
Pdef.gui
::

subsection::MIDI

This is how we can play a MIDI instrument in channel 1 (chan: 0) with velocity 127 (amp: 1):

code::
1 chan: 0 dur: 1 octave: 4 degree: 5 amp: 1;

// It is equivalent to:
MIDIClient.init;
o = MIDIOut.new(0);

Pbind(
  \type, \midi,
  \chan, 0,
  \midicmd, \noteOn,
  \midiout, o,
  \dur, 1,
  \octave, 4,
  \degree, 5,
);
::

We also can send control messages to the previous pattern.

code::
// Send control to id 1
2 control: [1, 1];

// Same as:
Pbind(
  \type, \midi,
  \midiout, o,
  \midicmd, \control,
  \chan, 1,
  \ctlNum, 1,
  \control, 127,
);
::

This is how we can individually map a control:
code::
MIDIClient.init;
o = MIDIOut.new(0);
o.control(0, 1, 127); // Channel 1, controller 1, value 127
::

ClassMethods::

method:: new
Creates a new instance of the Px class.
argument:: newPattern
The pattern event to build and control.
argument:: name
A string representing the name of the Pdef instance.
argument:: trace
A boolean value indicating whether to enable tracing for the patterns.

method:: gui
Opens a GUI interface for controlling and visualizing the patterns.

method:: release
Releases the patterns with a fade-out effect.
argument:: time
The duration of the fade-out effect in seconds.
argument:: name
The name of the `Px` instance to release.

method:: save
Saves the current patterns as the last used patterns for a given name.
argument:: name
The name under which to save the patterns.

method:: chorus
Loads and plays the last saved patterns for a given name.
argument:: name
The name of the patterns to load and play.

method:: shuffle
Shuffles the seed values for randomization in the patterns.
argument:: name
The name of the patterns to shuffle.

method:: help
Displays help information for the Px class or a specific SynthDef.
argument:: synthDef
The name of a SynthDef to display help information for.

method:: last
Returns the last used patterns for a given name.

method:: trace
Traces and displays the pattern evaluation process.
argument:: name
The name of the patterns to trace.


examples:

code::
1 i: \bd dur: 1 delay: 0.2;
2 i: \sn dur: 2 off: 1 reverb: 0.2;
3 i: \ch dur: 0.25 off: 0.5 rotate: 1;
::

